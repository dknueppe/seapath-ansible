[main]
summary=Welotec custom rt-profile based on SEAPATH

[rtentsk]
#
# tuned configuration
#
# Dependencies:
#
# - tuna
# - awk
# - wc

[variables]
isolated_cores=5-7
non_isolated_cores=0,8
non_isolated_cores_expanded=${f:cpulist_unpack:${non_isolated_cores}}
isolated_cores_assert_check = \\${isolated_cores}
# Make sure isolated_cores is defined before any of the variables that
# use it (such as assert1) are defined, so that child profiles can set
# isolated_cores directly in the profile (tuned.conf)
# Fail if isolated_cores are not set
assert1=${f:assertion_non_equal:isolated_cores are set:${isolated_cores}:${isolated_cores_assert_check}}
# Non-isolated cores cpumask including offline cores
not_isolated_cpumask = ${f:cpulist2hex_invert:${isolated_cores}}
isolated_cores_expanded=${f:cpulist_unpack:${isolated_cores}}
isolated_cpumask=${f:cpulist2hex:${isolated_cores_expanded}}
isolated_cores_online_expanded=${f:cpulist_online:${isolated_cores}}
non_isolated_cores=${f:cpulist_invert:${isolated_cores}}
# Fail if isolated_cores contains CPUs which are not online
assert2=${f:assertion:isolated_cores contains online CPU(s):${isolated_cores_expanded}:${isolated_cores_online_expanded}}
# Assembly managed_irq
# Make sure isolate_managed_irq is defined before any of the variables that
# use it (such as managed_irq) are defined, so that child profiles can set
# isolate_managed_irq directly in the profile (tuned.conf)
isolate_managed_irq=Y
managed_irq=${f:regex_search_ternary:${isolate_managed_irq}:\b[y,Y,1,t,T]\b:managed_irq,domain,:}

[net]
channels=combined ${f:check_net_queue_count:${netdev_queue_count}}

[sysctl]
kernel.hung_task_timeout_secs = 600
kernel.nmi_watchdog = 0
kernel.sched_rt_runtime_us = -1
vm.stat_interval = 10
kernel.timer_migration = 0
kernel.printk=3 1 1 7
kernel.nmi_watchdog=0
vm.nr_hugepages=10

[sysfs]
/sys/bus/workqueue/devices/writeback/cpumask = ${not_isolated_cpumask}
/sys/devices/virtual/workqueue/cpumask = ${not_isolated_cpumask}
/sys/devices/virtual/workqueue/*/cpumask = ${not_isolated_cpumask}
/sys/devices/system/machinecheck/machinecheck*/ignore_ce = 1
# Stop kernel same page merge (KSM) daemon, it may introduce latencies.
#
# 0: stop ksmd, keep merged pages
# 1: run ksmd
# 2: stop ksmd, unmerge all pages
/sys/kernel/mm/ksm/run = 2
# Perform lockless check for timer softirq on isolated CPUs.
/sys/kernel/ktimer_lockless_check = 1
/sys/module/kvm/parameters/halt_poll_ns = 0

[bootloader]
cmdline_realtime=+isolcpus=${managed_irq}${isolated_cores} nosoftlockup tsc=reliable
cmdline_rvh=+nohz=on nohz_full=${isolated_cores} rcu_nocbs=${isolated_cores} irqaffinity=${non_isolated_cores}
cmdline_srh=+processor.max_cstate=0 intel_idle.max_cstate=1 cpufreq.default_governor=performance rcu_nocb_poll 
cmdline_srh=+iomem=relaxed processor.max_cstate=1 intel_pstate=no_hwp intel_iommu=on iommu=pt skew_tick=1 
cmdline_srh=+threadirqs preempt=full default_hugepagesz=1G hugepagesz=1G possible_cpus=16

[irqbalance]
banned_cpus=${isolated_cores}

# concatenate the script files in /lib/tuned/{profile}/script.sh next to the tuned.conf file
[script]
script=${i:PROFILE_DIR}/script.sh

[scheduler]
isolated_cores=${isolated_cores}
# group.group_name=rule_priority:scheduler_policy:scheduler_priority:core_affinity_in_hex:process_name_regex
# for i in `pgrep ksoftirqd` ; do grep Cpus_allowed_list /proc/$i/status ; done
group.ksoftirqd=0:f:2:*:^\[ksoftirqd
group.ktimers=0:f:2:*:^\[ktimers
# for i in `pgrep rcuc` ; do grep Cpus_allowed_list /proc/$i/status ; done
group.rcuc=0:f:10:*:^\[rcuc
# for i in `pgrep rcuc` ; do grep Cpus_allowed_list /proc/$i/status ; done
group.rcuc=0:f:4:*:^\[rcuc
# for i in `pgrep rcub` ; do grep Cpus_allowed_list /proc/$i/status ; done
group.rcub=0:f:4:*:^\[rcub
# for i in `pgrep ktimersoftd` ; do grep Cpus_allowed_list /proc/$i/status ; done
group.ktimersoftd=0:f:3:*:^\[ktimersoftd
ps_blacklist=^\[ksoftirqd;^\[ktimers;^\[rcuc;^\[rcub;^\[ktimersoftd;pmd;PMD;^DPDK;qemu-kvm
